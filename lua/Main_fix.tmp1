local __haxe_crypto_Md5, __haxe_io_BytesOutput, __haxe_io_Output, __haxe_io_BytesBuffer, __lua_Thread, __lua_UserData, __haxe_io_Error, __haxe__Int64_Int64_Impl_, __processing_structures_HyperLogLogPlusPlusData, __processing_structures_HyperLogLogPlusPlus, __processing_structures_HyperLogLog, __processing_structures_Error, __haxe_io_Bytes, __haxe_crypto_Sha1, __haxe_Int64Helper, __haxe__Int64____Int64, __haxe__Int32_Int32_Impl_, _hx_wrap_if_string_field, _hx_print, __haxe_IMap, __haxe_Log, __lua_Boot, require 
-- Generated by Haxe 4.0.0 (git build development @ 476d180)
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
__haxe_IMap = _hx_e()
__haxe_crypto_Md5 = _hx_e()
__haxe_io_Bytes = _hx_e()
__lua_Boot = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_a();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    ret:push(i1);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    local i1 = i:next();
    _G.table.insert(tbl, Std.string(i1));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g1 = pos;
  local _g = _end;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g1 = pos;
  local _g = pos + len;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g11 = pos + len;
  local _g2 = self.length;
  while (_g11 < _g2) do 
    _g11 = _g11 + 1;
    local i1 = _g11 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g1 = 0;
  local _g = len;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g1 = 0;
  local _g = self.length;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    if (self[i] == x) then 
      local _g3 = i;
      local _g2 = self.length - 1;
      while (_g3 < _g2) do 
        _g3 = _g3 + 1;
        local j = _g3 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g1 = fromIndex;
  local _g = _end;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end

Main.new = {}
Main.main = function() 
  do return Main.calc(KEYS, ARGV) end;
end
Main.calc = function(keys,args) 
  local numKeys = Std.parseInt(Std.string(#keys) .. Std.string("")) + 1;
  local _g = 0;
  while (_g < 86400) do 
    _g = _g + 1;
    local i = _g - 1;
    redis.call("LPUSH", "1", __haxe_crypto_Md5.encode(Std.string(i) .. Std.string("")));
  end;
  do return "ok" end;
end

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Reflect.new = {}
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _G.string.len(o) end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
    
      local _hx_1 = _hx_result
      local e = _hx_1
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  if (_G.type(o) == "string") then 
    do return Reflect.fields(String.prototype) end;
  else
    local _g = _hx_tab_array({}, 0);
    local f = __lua_Boot.fieldIterator(o);
    while (f:hasNext()) do 
      local f1 = f:next();
      _g:push(f1);
    end;
    do return _g end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local i = 0;
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = _G.string.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  local delim_offset = (function() 
    local _hx_1
    if (#delimiter > 0) then 
    _hx_1 = #delimiter; else 
    _hx_1 = 1; end
    return _hx_1
  end )();
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.get_length = function(self) 
  do return _G.string.len(self) end
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end
Std.parseInt = function(x) 
  if (x == nil) then 
    do return nil end;
  end;
  local hexMatch = _G.string.match(x, "^ *[%-+]*0[xX][%da-fA-F]*");
  if (hexMatch ~= nil) then 
    local pos = 2;
    local len = nil;
    if ((len == nil) or (len > (pos + #hexMatch))) then 
      len = #hexMatch;
    else
      if (len < 0) then 
        len = #hexMatch + len;
      end;
    end;
    if (pos < 0) then 
      pos = #hexMatch + pos;
    end;
    if (pos < 0) then 
      pos = 0;
    end;
    do return _G.tonumber(_G.string.sub(hexMatch, pos + 1, pos + len), 16) end;
  else
    local intMatch = _G.string.match(x, "^ *[%-+]?%d*");
    if (intMatch ~= nil) then 
      do return _G.tonumber(intMatch) end;
    else
      do return nil end;
    end;
  end;
end

__haxe_IMap.new = {}

__haxe_crypto_Md5.new = function() 
  local self = _hx_new(__haxe_crypto_Md5.prototype)
  __haxe_crypto_Md5.super(self)
  return self
end
__haxe_crypto_Md5.super = function(self) 
end
__haxe_crypto_Md5.encode = function(s) 
  local m = __haxe_crypto_Md5.new();
  local h = m:doEncode(__haxe_crypto_Md5.str2blks(s));
  do return m:hex(h) end;
end
__haxe_crypto_Md5.str2blks = function(str) 
  local str1 = __haxe_io_Bytes.ofString(str);
  local nblk = (_hx_bit.arshift(str1.length + 8,6)) + 1;
  local blks = Array.new();
  local blksSize = nblk * 16;
  local _g1 = 0;
  local _g = blksSize;
  while (_g1 < _g) do 
    _g1 = _g1 + 1;
    local i = _g1 - 1;
    blks[i] = 0;
  end;
  local i1 = 0;
  local max = str1.length;
  local l = max * 8;
  while (i1 < max) do 
    local blks1 = blks;
    local tmp = _hx_bit.arshift(i1,2);
    blks1[tmp] = _hx_bit.bor(blks1[tmp],_hx_bit.lshift(str1.b[i1],(_G.math.fmod((l + i1), 4)) * 8));
    i1 = i1 + 1;
  end;
  local blks2 = blks;
  local tmp1 = _hx_bit.arshift(i1,2);
  blks2[tmp1] = _hx_bit.bor(blks2[tmp1],_hx_bit.lshift(128,(_G.math.fmod((l + i1), 4)) * 8));
  local k = (nblk * 16) - 2;
  blks[k] = _hx_bit.band(l,255);
  local blks3 = blks;
  local k1 = k;
  blks3[k1] = _hx_bit.bor(blks3[k1],_hx_bit.lshift((_hx_bit.band(_hx_bit.rshift(l,8),255)),8));
  local blks4 = blks;
  local k2 = k;
  blks4[k2] = _hx_bit.bor(blks4[k2],_hx_bit.lshift((_hx_bit.band(_hx_bit.rshift(l,16),255)),16));
  local blks5 = blks;
  local k3 = k;
  blks5[k3] = _hx_bit.bor(blks5[k3],_hx_bit.lshift((_hx_bit.band(_hx_bit.rshift(l,24),255)),24));
  do return blks end;
end
__haxe_crypto_Md5.prototype = _hx_a();
__haxe_crypto_Md5.prototype.bitOR = function(self,a,b) 
  local lsb = _hx_bit.bor(_hx_bit.band(a,1),_hx_bit.band(b,1));
  local msb31 = _hx_bit.bor(_hx_bit.rshift(a,1),_hx_bit.rshift(b,1));
  do return _hx_bit.bor(_hx_bit.lshift(msb31,1),lsb) end
end
__haxe_crypto_Md5.prototype.bitXOR = function(self,a,b) 
  local lsb = _hx_bit.bxor(_hx_bit.band(a,1),_hx_bit.band(b,1));
  local msb31 = _hx_bit.bxor(_hx_bit.rshift(a,1),_hx_bit.rshift(b,1));
  do return _hx_bit.bor(_hx_bit.lshift(msb31,1),lsb) end
end
__haxe_crypto_Md5.prototype.bitAND = function(self,a,b) 
  local lsb = _hx_bit.band(_hx_bit.band(a,1),(_hx_bit.band(b,1)));
  local msb31 = _hx_bit.band(_hx_bit.rshift(a,1),_hx_bit.rshift(b,1));
  do return _hx_bit.bor(_hx_bit.lshift(msb31,1),lsb) end
end
__haxe_crypto_Md5.prototype.addme = function(self,x,y) 
  local lsw = (_hx_bit.band(x,65535)) + (_hx_bit.band(y,65535));
  local msw = ((_hx_bit.arshift(x,16)) + (_hx_bit.arshift(y,16))) + (_hx_bit.arshift(lsw,16));
  do return _hx_bit.bor(_hx_bit.lshift(msw,16),_hx_bit.band(lsw,65535)) end
end
__haxe_crypto_Md5.prototype.hex = function(self,a) 
  local str = "";
  local hex_chr = "0123456789abcdef";
  local _g = 0;
  while (_g < a.length) do 
    local num = a[_g];
    _g = _g + 1;
    local _g1 = 0;
    while (_g1 < 4) do 
      _g1 = _g1 + 1;
      local j = _g1 - 1;
      local index = _hx_bit.band(_hx_bit.arshift(num,(j * 8) + 4),15);
      local index1 = _hx_bit.band(_hx_bit.arshift(num,j * 8),15);
      str = Std.string(str) .. Std.string((Std.string(_G.string.sub(hex_chr, index + 1, index + 1)) .. Std.string(_G.string.sub(hex_chr, index1 + 1, index1 + 1))));
    end;
  end;
  do return str end
end
__haxe_crypto_Md5.prototype.rol = function(self,num,cnt) 
  do return _hx_bit.bor(_hx_bit.lshift(num,cnt),_hx_bit.rshift(num,32 - cnt)) end
end
__haxe_crypto_Md5.prototype.cmn = function(self,q,a,b,x,s,t) 
  do return self:addme(self:rol(self:addme(self:addme(a, q), self:addme(x, t)), s), b) end
end
__haxe_crypto_Md5.prototype.ff = function(self,a,b,c,d,x,s,t) 
  do return self:cmn(self:bitOR(self:bitAND(b, c), self:bitAND(_hx_bit.bnot(b), d)), a, b, x, s, t) end
end
__haxe_crypto_Md5.prototype.gg = function(self,a,b,c,d,x,s,t) 
  do return self:cmn(self:bitOR(self:bitAND(b, d), self:bitAND(c, _hx_bit.bnot(d))), a, b, x, s, t) end
end
__haxe_crypto_Md5.prototype.hh = function(self,a,b,c,d,x,s,t) 
  do return self:cmn(self:bitXOR(self:bitXOR(b, c), d), a, b, x, s, t) end
end
__haxe_crypto_Md5.prototype.ii = function(self,a,b,c,d,x,s,t) 
  do return self:cmn(self:bitXOR(c, self:bitOR(b, _hx_bit.bnot(d))), a, b, x, s, t) end
end
__haxe_crypto_Md5.prototype.doEncode = function(self,x) 
  local a = 1732584193;
  local b = -271733879;
  local c = -1732584194;
  local d = 271733878;
  local step;
  local i = 0;
  while (i < x.length) do 
    local olda = a;
    local oldb = b;
    local oldc = c;
    local oldd = d;
    step = 0;
    a = self:ff(a, b, c, d, x[i], 7, -680876936);
    d = self:ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = self:ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = self:ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = self:ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = self:ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = self:ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = self:ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = self:ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = self:ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = self:ff(c, d, a, b, x[i + 10], 17, -42063);
    b = self:ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = self:ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = self:ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = self:ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = self:ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = self:gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = self:gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = self:gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = self:gg(b, c, d, a, x[i], 20, -373897302);
    a = self:gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = self:gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = self:gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = self:gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = self:gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = self:gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = self:gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = self:gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = self:gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = self:gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = self:gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = self:gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = self:hh(a, b, c, d, x[i + 5], 4, -378558);
    d = self:hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = self:hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = self:hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = self:hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = self:hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = self:hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = self:hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = self:hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = self:hh(d, a, b, c, x[i], 11, -358537222);
    c = self:hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = self:hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = self:hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = self:hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = self:hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = self:hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = self:ii(a, b, c, d, x[i], 6, -198630844);
    d = self:ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = self:ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = self:ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = self:ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = self:ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = self:ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = self:ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = self:ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = self:ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = self:ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = self:ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = self:ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = self:ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = self:ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = self:ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = self:addme(a, olda);
    b = self:addme(b, oldb);
    c = self:addme(c, oldc);
    d = self:addme(d, oldd);
    i = i + 16;
  end;
  do return _hx_tab_array({[0]=a, b, c, d}, 4) end
end

__haxe_io_Bytes.new = function(length,b) 
  local self = _hx_new()
  __haxe_io_Bytes.super(self,length,b)
  return self
end
__haxe_io_Bytes.super = function(self,length,b) 
  self.length = length;
  self.b = b;
end
__haxe_io_Bytes.ofString = function(s) 
  local _g = _hx_tab_array({}, 0);
  local _g2 = 0;
  local _g1 = #s;
  while (_g2 < _g1) do 
    _g2 = _g2 + 1;
    local c = _g2 - 1;
    _g:push(_G.string.byte(s, c + 1));
  end;
  local bytes = _g;
  do return __haxe_io_Bytes.new(bytes.length, bytes) end;
end

__lua_Boot.new = {}
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g1 = 2;
    local _g = o.length;
    while (_g1 < _g) do 
      _g1 = _g1 + 1;
      local i = _g1 - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  local _g = type(o);
  local _g1 = _g;
  if (_g1) == "boolean" then 
    do return tostring(o) end;
  elseif (_g1) == "function" then 
    do return "<function>" end;
  elseif (_g1) == "nil" then 
    do return "null" end;
  elseif (_g1) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g1) == "string" then 
    do return o end;
  elseif (_g1) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (#s > 5) then 
            do return "[...]" end;
          else
            local _g2 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g2:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g2:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(Std.string(o[f1])));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g1) == "thread" then 
    do return "<thread>" end;
  elseif (_g1) == "userdata" then 
    do return "<userdata>" end;else
  _G.error("Unknown Lua type",0); end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end
_hx_bit_clamp = function(v) 
  if v <= 2147483647 and v >= -2147483648 then
    if v > 0 then return _G.math.floor(v)
    else return _G.math.ceil(v)
    end
  end
  if v > 2251798999999999 then v = v*2 end;
  if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
  return _hx_bit.band(v, 2147483647 ) - math.abs(_hx_bit.band(v, 2147483648))
end
pcall(require, 'bit')
if bit then
  _hx_bit = bit
elseif bit32 then
  local _hx_bit_raw = bit32
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
else
  _G.error("Bitop library is missing.  Please install luabitop");
end
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
end

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end
_hx_static_init();
Main.main()
